CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
SET(CMAKE_C_COMPILER /usr/bin/gcc-5)
SET(CMAKE_CXX_COMPILER /usr/bin/g++-5)
PROJECT(tool)
ADD_DEFINITIONS(-DTOOL)
ADD_DEFINITIONS(-DUSE_OPENCV2)
SET(TOOL_BUILD TRUE)

# Include dependent libraries
INCLUDE($ENV{NAO_HOME}/build/common.cmake)
SET(CMAKE_MODULE_PATH "${NAO_HOME}/build/cmake")
ADD_SUBDIRECTORY(core)
ADD_SUBDIRECTORY(rswalk2014)
ADD_SUBDIRECTORY(pythonswig)

LIST(APPEND CMAKE_PREFIX_PATH /usr/lib/x86_64-linux-gnu)

# Find package dependencies
FIND_PACKAGE(Qt4 REQUIRED QtCore QtGui QtOpenGL QtXml QtSvg)
FIND_PACKAGE(Boost REQUIRED thread system filesystem program_options)
FIND_PACKAGE(FFTW REQUIRED)
FIND_PACKAGE(PNG REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(GLUT REQUIRED)
FIND_PACKAGE(OpenCV REQUIRED)

# Gather tool sources
SET(TOOL_DIR ${NAO_HOME}/tools/UTNaoTool)
FILE(GLOB_RECURSE tool_SOURCES ${TOOL_DIR}/*.cpp)
FILE(GLOB_RECURSE tool_HEADERS ${TOOL_DIR}/*.h)
FILE(GLOB_RECURSE tool_FORMS ${TOOL_DIR}/*.ui)
FILE(GLOB_RECURSE tool_RESOURCES ${TOOL_DIR}/*.qrc)

# QT Setup
ADD_DEFINITIONS(-DBOOST_TT_HAS_OPERATOR_HPP_INCLUDED)
QT4_WRAP_CPP(tool_HEADERS_MOC ${tool_HEADERS})
QT4_WRAP_UI(tool_FORMS_HEADERS ${tool_FORMS})
QT4_ADD_RESOURCES(tool_RESOURCES_RCC ${tool_RESOURCES})
INCLUDE(${QT_USE_FILE})
INCLUDE_DIRECTORIES(${TOOL_DIR} ${QT_DIR})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}) # Include ui files
ADD_DEFINITIONS(${QT_DEFINITIONS})

# Create final tool executable
ADD_EXECUTABLE(tool ${tool_SOURCES} ${tool_HEADERS_MOC} ${tool_FORMS_HEADERS} ${tool_RESOURCES_RCC})
INCLUDE(${CMAKE_CURRENT_LIST_DIR}/trainers.cmake)

# Specialized find/link function because it's 2015 and cmake still can't handle multiarch
SET(CMAKE_PREFIX_PATH "/usr")
FUNCTION(FIND_AND_LINK target fullName)
  STRING(REGEX REPLACE "^([A-Za-z0-9\\-]+).so.*" "\\1" baseName ${fullName})
  FIND_LIBRARY(${baseName} NAMES ${fullName} PATHS "/usr/lib/x86_64-linux-gnu" "/usr/lib" "/lib/x86_64-linux-gnu")
  TARGET_LINK_LIBRARIES(${target} ${${baseName}})
  #MESSAGE(STATUS "Found ${baseName} at ${${baseName}}, linking to ${target}")
  IF(NOT(${baseName}))
    MESSAGE(FATAL_ERROR "ERROR: Could not find library ${fullName}")
  ENDIF(NOT(${baseName}))
ENDFUNCTION(FIND_AND_LINK)

# A bunch of shared objects that need to be linked individually because cmake is bad
FIND_AND_LINK(tool libdl.so.2)
FIND_AND_LINK(tool libpthread.so.0)
FIND_AND_LINK(tool libjpeg.so.8)
FIND_AND_LINK(tool libtiff.so.5)
FIND_AND_LINK(tool libjasper.so.1)
#FIND_AND_LINK(tool libIlmImf.so.6)
FIND_AND_LINK(tool libIlmImf-2_2.so.22)
FIND_AND_LINK(tool libHalf.so.12)
FIND_AND_LINK(tool libgtk-x11-2.0.so.0)
FIND_AND_LINK(tool libgdk-x11-2.0.so.0)
FIND_AND_LINK(tool libgtkglext-x11-1.0.so.0)
FIND_AND_LINK(tool libgdkglext-x11-1.0.so.0)
FIND_AND_LINK(tool libdc1394.so.22)
FIND_AND_LINK(tool libv4l1.so.0)
#FIND_AND_LINK(tool libavcodec.so.54)
#FIND_AND_LINK(tool libavformat.so.54)
#FIND_AND_LINK(tool libavutil.so.52)
#FIND_AND_LINK(tool libswscale.so.2)
FIND_AND_LINK(tool libtbb.so.2)
FIND_AND_LINK(tool libqwt.so)
FIND_AND_LINK(tool libX11.so.6)
FIND_AND_LINK(tool libglapi.so.0)
FIND_AND_LINK(tool libXext.so.6)
FIND_AND_LINK(tool libXdamage.so.1)
FIND_AND_LINK(tool libXfixes.so.3)
FIND_AND_LINK(tool libX11-xcb.so.1)
FIND_AND_LINK(tool libxcb-glx.so.0)
FIND_AND_LINK(tool libxcb.so.1)
FIND_AND_LINK(tool libXxf86vm.so.1)
FIND_AND_LINK(tool libdrm.so.2)
FIND_AND_LINK(tool libfreetype.so.6)
FIND_AND_LINK(tool libXrender.so.1)
FIND_AND_LINK(tool libfontconfig.so.1)
FIND_AND_LINK(tool libaudio.so.2)
FIND_AND_LINK(tool libz.so.1)
FIND_AND_LINK(tool libgobject-2.0.so.0)
FIND_AND_LINK(tool libSM.so.6)
FIND_AND_LINK(tool libICE.so.6)
FIND_AND_LINK(tool libXi.so.6)
FIND_AND_LINK(tool libglib-2.0.so.0)
FIND_AND_LINK(tool libpng12.so.0)
FIND_AND_LINK(tool libXau.so.6)
FIND_AND_LINK(tool libXdmcp.so.6)
FIND_AND_LINK(tool libexpat.so.1)
FIND_AND_LINK(tool libXt.so.6)
FIND_AND_LINK(tool libpcre.so.3)
FIND_AND_LINK(tool libffi.so.6)
FIND_AND_LINK(tool libuuid.so.1)
FIND_AND_LINK(tool libpng15.so.15)
FIND_AND_LINK(tool libboost_thread.so)
FIND_AND_LINK(tool libboost_system.so)
FIND_AND_LINK(tool libc.so.6)
FIND_AND_LINK(tool libxcb-dri2.so.0)
FIND_AND_LINK(tool libxcb-dri3.so.0)
FIND_AND_LINK(tool libxcb-present.so.0)
FIND_AND_LINK(tool libxcb-sync.so.1)
FIND_AND_LINK(tool libxshmfence.so.1)
FIND_AND_LINK(tool libQGLViewer-qt4.so)
FIND_AND_LINK(tool librt.so.1)
FIND_AND_LINK(tool libfftw3f.so)

TARGET_LINK_LIBRARIES(tool ${QT_LIBRARIES} ${Boost_LIBRARIES} ${FFTW_LIBRARIES} ${PNG_LIBRARIES} ${OPENGL_LIBRARIES} ${GLUT_LIBRARIES} ${OPENCV2_LIBS} core rswalk2014 _pythonswig_module ${LIBFLATBUFFERS}x64 ${LIBYAML-CPP}x64 ${ALGLIB}x64 ${LIBYUVIEW}x64)

# Link the x64 version of detect lib
TARGET_LINK_LIBRARIES(tool $ENV{NAO_HOME}/lib/64/libdetect_lib.so -lboost_thread)
# Add RPATH to ensure it can find the detect lib
set(CMAKE_INSTALL_RPATH "$ORIGIN/../lib/64/")
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
