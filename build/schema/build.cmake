CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake)
FIND_PACKAGE(FlatBuffers REQUIRED)

INCLUDE($ENV{NAO_HOME}/build/common.cmake)

SET(SCHEMA_GENERATOR_SOURCE_DIR $ENV{NAO_HOME}/build/schema)
SET(SCHEMA_GENERATOR "${SCHEMA_GENERATOR_SOURCE_DIR}/generator.py")
FILE(GLOB SCHEMA_GENERATOR_SOURCES ${SCHEMA_GENERATOR_SOURCE_DIR}/*.py)
FILE(MAKE_DIRECTORY "${SCHEMA_GEN_DIR}")
FILE(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/include/schema")
SET(SCHEMA_DB "${SCHEMA_GEN_DIR}/database")
FILE(GLOB_RECURSE HEADERS "${NAO_HOME}/core/memory/*.h")
FOREACH(header ${HEADERS})
  LIST(APPEND SCHEMA_DB_ARGS --header ${header})
ENDFOREACH(header ${HEADERS})
EXECUTE_PROCESS(
  COMMAND ${SCHEMA_GENERATOR} --action build_db --dbpath ${SCHEMA_DB} ${SCHEMA_DB_ARGS} --schema ${SCHEMA_GEN_DIR} OUTPUT_VARIABLE RESULTS
)
ADD_CUSTOM_TARGET(generated_schemas)
MESSAGE(STATUS "Generating schema files")
FOREACH(HEADER ${HEADERS})
  EXECUTE_PROCESS(COMMAND ${SCHEMA_GENERATOR} --schema ${SCHEMA_GEN_DIR} --dbpath ${SCHEMA_DB} --action check --header ${HEADER} OUTPUT_VARIABLE RESULTS)
  STRING(STRIP "${RESULTS}" RESULTS)
  LIST(GET RESULTS 0 RESULT)
  IF(RESULT STREQUAL "SCHEMA_FOUND")
    LIST(REMOVE_AT RESULTS 0)
    SET(SCHEMA_DEPENDENCIES "")
      FOREACH(RESULT ${RESULTS})
        LIST(APPEND SCHEMA_DEPENDENCIES "${SCHEMA_GEN_DIR}/${RESULT}.fbs")
      ENDFOREACH(RESULT ${RESULTS})
    STRING(LENGTH "${NAO_HOME}/core/" CORE_LEN)
    GET_FILENAME_COMPONENT(HEADER_DIR ${HEADER} DIRECTORY)
    GET_FILENAME_COMPONENT(HEADER_NAME ${HEADER} NAME_WE)
    STRING(SUBSTRING ${HEADER_DIR} ${CORE_LEN} -1 HEADER_INCLUDE)
    SET(GENERATED_SCHEMA "${SCHEMA_GEN_DIR}/${HEADER_NAME}.fbs")
    SET(GENERATED_SOURCE "${SCHEMA_GEN_DIR}/${HEADER_NAME}.cpp")
    STRING(FIND ${HEADER} "external" IS_EXTERNAL)
    IF(${IS_EXTERNAL} EQUAL -1) 
      # Not an external schema so no header is generated
      SET(GENERATED_HEADER "")
    ELSE(${IS_EXTERNAL} EQUAL -1)
      # External schemas have a generated header, so fill out the path for the schema generator output
      SET(GENERATED_HEADER "${SCHEMA_GEN_DIR}/${HEADER_NAME}.h")
    ENDIF(${IS_EXTERNAL} EQUAL -1)
    STRING(REGEX REPLACE "[{}]" "_" SCHEMA_MODULE_NAME ${HEADER_NAME})
    ADD_CUSTOM_COMMAND(
      OUTPUT ${GENERATED_SCHEMA} ${GENERATED_SOURCE} ${GENERATED_HEADER}
      COMMAND ${SCHEMA_GENERATOR} --action schema --dbpath ${SCHEMA_DB} --header ${HEADER} --schema ${SCHEMA_GEN_DIR} --source ${SCHEMA_GEN_DIR} --include ${HEADER_INCLUDE}
      DEPENDS ${HEADER} ${SCHEMA_GENERATOR} ${SCHEMA_DB} ${SCHEMA_DEPENDENCIES}
    )
    BUILD_FLATBUFFERS("${GENERATED_SCHEMA}" "${FLATBUFFERS_INCLUDE_DIRS}" ${SCHEMA_MODULE_NAME} "${SCHEMA_DEPENDENCIES}" "${SCHEMA_GEN_DIR}" "" "")
    ADD_DEPENDENCIES(generated_schemas ${SCHEMA_MODULE_NAME})
    LIST(APPEND GENERATED_SCHEMA_FILES ${GENERATED_SCHEMA})
    LIST(APPEND GENERATED_SCHEMA_SOURCES ${GENERATED_SOURCE})
  ENDIF(RESULT STREQUAL "SCHEMA_FOUND")
ENDFOREACH(HEADER ${HEADERS})


INCLUDE_DIRECTORIES("${CMAKE_CURRENT_LIST_DIR}/include" "${CMAKE_CURRENT_BINARY_DIR}/include")
INCLUDE_DIRECTORIES(SYSTEM ${EIGEN3_INCLUDE_DIR} ${FLATBUFFERS_INCLUDE_DIRS})
