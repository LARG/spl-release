#!/usr/bin/env python
from __future__ import print_function
import inspect, os, sys

script_path = os.path.abspath(inspect.getfile(inspect.currentframe()))
if len(sys.argv) > 1:
  f = open(sys.argv[1], 'w')
else:
  f = sys.stdout

def generateWarning():
  output = """/*
  THIS FILE HAS BEEN AUTOMATICALLY GENERATED BY %s
  DO NOT ALTER THIS FILE DIRECTLY - YOUR CHANGES WILL BE LOST
*/
  """ % script_path
  print(output, file=f)

def generateIncludes():
  output = ""
  for cname in sorted(set(blocks.values())):
    output += "#include <memory/%s.h>\n" % cname
  print(output, file=f)

def generateNew():
  output = '#define NEW_MEMORY_BLOCK(name) (\\\n'
  for name in sorted(blocks):
    cname = blocks[name]
    output += '  name == "%s" ? (MemoryBlock*)new %s() : \\\n'  % (name,cname)
  output += '  NULL)'
  print(output, file=f)

def generateCopy():
  output = '#define COPY_MEMORY_BLOCK(name,ptr) (\\\n'
  for name in sorted(blocks):
    cname = blocks[name]
    output += '  name == "%s" ? (MemoryBlock*)new %s(*(%s*)ptr) : \\\n'  % (name,cname,cname)
  output += '  NULL)'
  print(output, file=f)

def generateDelete():
  output = '#define DELETE_MEMORY_BLOCK(name,ptr) \\\n  '
  for name in sorted(blocks):
    cname = blocks[name]
    output += 'if(name == "%s") delete (%s*)ptr; \\\n' % (name,cname)
    output += '  else '
  output += '{ fprintf(stderr, "ERROR DELETING MEMORY BLOCK \'%s\'\\n", name.c_str()); }'
  print(output, file=f)

def generateAddBlock():
  output = '#define ADD_MEMORY_BLOCK(name,function) \\\n  '
  for name in sorted(blocks):
    cname = blocks[name]
    output += 'if(name == "%s") return function(name, new %s()); \\\n' % (name,cname)
    output += '  else '
  output += '{ fprintf(stderr, "ERROR ADDING MEMORY BLOCK \'%s\'\\n", name.c_str()); return false; }'
  print(output, file=f)

def generateFunctionCall():
  output = '#define MEMORY_BLOCK_TEMPLATE_FUNCTION_CALL(name,function,default_return,...) (\\\n  '
  for name in sorted(blocks):
    cname = blocks[name]
    output += 'name == "%s" ? function<%s>(__VA_ARGS__) : \\\n' % (name,cname)
  output += ' default_return)'
  print(output, file=f)

def main():
  generateWarning()
  generateIncludes()
  generateNew()
  generateCopy()
  generateDelete()
  generateAddBlock()
  generateFunctionCall()


blocks = {
  "frame_info":"FrameInfoBlock",
  "vision_frame_info":"FrameInfoBlock",
  "raw_vision_frame_info":"FrameInfoBlock",
  "body_model":"BodyModelBlock",
  "graphable":"GraphableBlock",
  "raw_joint_angles":"JointBlock",
  "processed_joint_angles":"JointBlock",
  "raw_joint_commands":"JointCommandBlock",
  "processed_joint_commands":"JointCommandBlock",
  "led_commands":"LEDBlock",
  "raw_sensors":"SensorBlock",
  "processed_sensors":"SensorBlock",
  "sensor_calibration":"SensorCalibrationBlock",
  "sim_effectors":"SimEffectorBlock",
  "sim_image":"SimImageBlock",
  "sim_world_objects":"WorldObjectBlock",
  "sim_truth_data":"SimTruthDataBlock",
  "walk_engine":"WalkEngineBlock",
  "kick_params":"KickParamBlock",
  "walk_param":"WalkParamBlock",
  "al_walk_param":"ALWalkParamBlock",
  "walk_request":"WalkRequestBlock",
  "walk_response":"WalkResponseBlock",
  "kick_request":"KickRequestBlock",
  "kick_engine":"KickEngineBlock",
  "kick_module":"KickModuleBlock",
  "odometry":"OdometryBlock",
  "processed_sonar":"ProcessedSonarBlock",
  "walk_info":"WalkInfoBlock",
  "vision_odometry":"OdometryBlock",
  "raw_camera_info":"CameraBlock",
  "camera_info":"CameraBlock",
  "vision_body_model":"BodyModelBlock",
  "vision_sensors":"SensorBlock",
  "vision_joint_angles":"JointBlock",
  "vision_kick_request":"KickRequestBlock",
  "vision_walk_request":"WalkRequestBlock",
  "vision_walk_response":"WalkResponseBlock",
  "vision_joint_commands":"JointCommandBlock",
  "world_objects":"WorldObjectBlock",
  "robot_vision":"RobotVisionBlock",
  "raw_image":"ImageBlock",
  "vision_processed_sonar":"ProcessedSonarBlock",
  "vision_kick_params":"KickParamBlock",
  "vision_walk_param":"WalkParamBlock",
  "vision_al_walk_param":"ALWalkParamBlock",
  "vision_walk_info":"WalkInfoBlock",
  "behavior":"BehaviorBlock",
  "behavior_params":"BehaviorParamBlock",
  "localization":"LocalizationBlock",
  "delayed_localization":"DelayedLocalizationBlock",
  "opponents":"OpponentBlock",
  "team_packets":"TeamPacketsBlock",
  "robot_state":"RobotStateBlock",
  "game_state":"GameStateBlock",
  "robot_info":"RobotInfoBlock",
  "speech":"SpeechBlock",
  "sync_body_model":"BodyModelBlock",
  "sync_joint_angles":"JointBlock",
  "sync_kick_request":"KickRequestBlock",
  "sync_odometry":"OdometryBlock",
  "sync_sensors":"SensorBlock",
  "sync_walk_request":"WalkRequestBlock",
  "sync_walk_response":"WalkResponseBlock",
  "sync_joint_commands":"JointCommandBlock",
  "sync_processed_sonar":"ProcessedSonarBlock",
  "sync_kick_params":"KickParamBlock",
  "sync_walk_param":"WalkParamBlock",
  "sync_al_walk_param":"ALWalkParamBlock",
  "sync_walk_info":"WalkInfoBlock",
  "audio_processing":"AudioProcessingBlock",
  "roi":"ROIBlock",
  "calibration":"CalibrationBlock"
}

main()
