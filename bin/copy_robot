#!/usr/bin/env python

import sys, subprocess, os

baseIP = '192.168.1.%s'
validInterfaces = ['nao', 'motion', 'python', 'memory_test', 'lola', 'vision',
                   'scripts', 'color_table', 'configs', 'time', 'detect_lib',
                   'models']

# All interfaces is the most common type of copy. Updates most code on the robot
# but does not change color tables, start up and stop scripts, and time.
allInterfaces = validInterfaces[:]
allInterfaces.remove('scripts')
allInterfaces.remove('color_table')
allInterfaces.remove('time')
allInterfaces.remove('memory_test')
installInterfaces = validInterfaces[:]

NAO_HOME = os.getenv('NAO_HOME')
basePath = os.path.join(NAO_HOME, 'build')

options = None

def verifyChecksums(ip, sourcePath, destPath, extension=None):
###############################################################
  sourceSplit = sourcePath.rpartition('/');
  newDestPath = destPath + sourceSplit[2];
  dest_md5_file = destPath.replace('/','_') + '.dest.md5sum'
  source_md5_file = destPath.replace('/','_') + '.src.md5sum'

  # run md5 on the current files (local and nao) and copy the nao's over
  # > md5sum ../core/python/core.py > python_.src.md5sum &&
  # > ssh nao@192.168.1.5 md5sum python/core.py > python_.dest.md5sum &&
  # > scp nao@192.168.1.5:python_.dest.md5sum > /dev/null
  if os.path.isdir(sourcePath):
    if not sourcePath.endswith('/'): sourcePath += '/'
    dir_md5 = 'cat %s* | md5sum > %s'
    if extension:
      dir_md5 = 'cat %s*.' + extension + ' | md5sum > %s'
    commands = [
      dir_md5 % (sourcePath,source_md5_file),
      ('ssh nao@%s "' + dir_md5 + '"') % (ip, newDestPath, dest_md5_file),
      'scp nao@%s:%s %s > /dev/null' % (ip, dest_md5_file, dest_md5_file)
    ]
  else:
    file_md5 = 'md5sum %s > %s'
    commands = [
      file_md5 % (sourcePath,source_md5_file),
      ('ssh nao@%s "' + file_md5 + '"') % (ip, newDestPath, dest_md5_file),
      'scp nao@%s:%s %s > /dev/null' % (ip, dest_md5_file, dest_md5_file)
    ]
  for cmd in commands:
    print "Verify: Running %s" %  cmd
    p = subprocess.Popen(cmd, shell=True)
    retcode = p.wait()
    print "Verify: Completed %s" % cmd

  # make sure process executed correctly
  if retcode != 0:
    print 'Unable to copy/generate md5 files: %s' % cmd
    playSound()
    if retcode <= 127:
      sys.exit(retcode)
    else:
      sys.exit(2)
  
  # open the files and read them
  src_md5 = open(source_md5_file, 'r')
  dest_md5 = open(dest_md5_file, 'r')
  source_checksums = src_md5.readlines()
  dest_checksums = dest_md5.readlines()
  src_md5.close()
  dest_md5.close()

  # splits the strings into a list of lists: [[checksum#, path/to/file], ... ]
  # then removes the path and goes back to strings: ['checksum# file', ...]
  # note: the lambda operator is awesome
  source_checksums = map(lambda x: x.split('/'), source_checksums)
  source_checksums = map(lambda x: x[0].split()[0] + ' ' + x[-1], source_checksums)
  dest_checksums = map(lambda x: x.split('/'), dest_checksums)
  dest_checksums = map(lambda x: x[0].split()[0] + ' ' + x[-1], dest_checksums)

  # compare the data
  okay = True
  for line in source_checksums:
    if line.strip() and line not in dest_checksums:
      print "File did not match: %s" % line.split(' ')[1].rstrip()
      okay = False
    
  if not okay:
    sys.stderr.write('  FILES ARE NOT SAME!!! PLEASE RE-COPY THIS INTERFACE\n')
  else:
    print '  Files are ok'

  # clean up the temp files
  cmd = 'ssh nao@%s "rm %s" && rm %s %s' \
    % (ip, dest_md5_file, dest_md5_file, source_md5_file)
  p = subprocess.Popen(cmd,shell=True)
  retcode = p.wait()
  
  if retcode != 0:
    print 'Removing md5 files failed: %s' % cmd


def copyFiles(ip,sourcePath,destPath,extension=None,delete=False):
  ext = ''
  if extension:
    ext = "--include='*/' --include='*.%s' --exclude='*'" % extension
  delete = '--delete' if delete else ''
  if delete:
    subprocess.Popen("ssh nao@%s 'rm -r %s/*'" % (ip,destPath),shell=True).wait()
  cmd = 'rsync -avz %s --progress --copy-links --exclude=.svn %s %s nao@%s:%s' % (delete,ext,os.path.join(basePath,sourcePath),ip,destPath)
  p = subprocess.Popen(cmd,shell=True)
  retcode = p.wait()
  
  if retcode != 0:
    print 'Copy failed: %s' % cmd
    if retcode <= 127:
      sys.exit(retcode)
    else:
      sys.exit(2)

def doFileOperations(ip,sourcePath,destPath,options,extension=None,delete=False):
  if options.verify:
    verifyChecksums(ip,sourcePath,destPath,extension=extension) # new verify script
  else:
    copyFiles(ip,sourcePath,destPath,extension=extension,delete=delete)

def makeUnique(seq, idfun=None): 
  # order preserving
  if idfun is None:
    def idfun(x): return x
  seen = {}
  result = []
  for item in seq:
    marker = idfun(item)
    # in old Python versions:
    # if seen.has_key(marker)
    # but in new ones:
    if marker in seen: continue
    seen[marker] = 1
    result.append(item)
  return result

def getIP(args):
  ip = None
  for ind in range(len(args)):
    if '.' in args[ind]:
      ip = args[ind]
      del args[ind]
      break
    try:
      ip = int(args[ind])
      ip = str(ip)
      del args[ind]
      break
    except:
      pass
  return ip,args

def main(ip,interfaces,options,robotID):
  base = 'build/%s/%s/'
  build = 'debug' if options.debug else 'optimized' if options.optimize else 'release'
  for interface in interfaces:
    if options.verify:
      print 'Verifying %s' % interface
    else: 
      print 'Copying %s' % interface
    ibase = base % (build,interface)
    if interface == 'nao':
      doFileOperations(ip,'%s/libnaointerface.so' % ibase,'bin/',options)

    elif interface in ['motion','vision','memory_test', 'lola']:
#      doFileOperations(ip,'%s/sdk/bin/%s' % (ibase,interface),'bin/',options)
      doFileOperations(ip,'%s/%s' % (ibase,interface),'bin/',options)

    elif interface == 'python':
      doFileOperations(ip,'../core/python/','python/',options,extension="py",delete=True)
      doFileOperations(ip,'build/swig/gen/pythonswig_module.py','bin/',options)
      doFileOperations(ip,'build/%s/pythonswig/lib_pythonswig_module.so' % build, 'bin/',options)
      subprocess.check_call('ssh nao@%s "ln -sf ~/bin/lib_pythonswig_module.so ~/bin/_pythonswig_module.so"' % ip,shell=True)

    elif interface == 'scripts':
      doFileOperations(ip,'../data/scripts/villa-st*','bin/',options)
      doFileOperations(ip,'../data/scripts/start_*.sh','bin/',options)
      doFileOperations(ip,'../data/scripts/restart_processes.sh','bin/',options)
      doFileOperations(ip,'../data/scripts/profile_addendum.sh','bin/',options)
      doFileOperations(ip,'../data/scripts/shorthand.sh','bin/',options)

    elif interface == 'color_table':
      doFileOperations(ip,'../data/current/def*.col','data/',options)
      doFileOperations(ip,'../data/current/coach*.col','data/',options)
      for suffix in ['top','bottom']:
        path = '../data/current/%s%s.col' % (robotID,suffix)
        if os.path.exists(path):
          doFileOperations(ip,path,'data/',options)
        else:
          print '  **No specific %s table for %s' % (suffix,robotID)

    elif interface == 'configs':
      if options.config_file:
        doFileOperations(ip, options.config_file, 'data/', options)
      else:
        doFileOperations(ip, '../data/mof/test/*.mof', 'data/mof/test/', options)
        print(' data/config/rswalk2014/*.cfg')
        doFileOperations(ip, '../data/config/rswalk2014/*.pos', 'data/config/rswalk2014/', options)
        print(' data/calibrations/*.cal')
        path = '../data/calibrations/%s_calibration.cal' % (robotID)
        if os.path.exists(path):
          doFileOperations(ip, path, 'data/calibrations/', options)
        else:
          print('  **No calibration for %s' % (robotID))
        print('data/models/*')
        path = '../data/models/*'
        doFileOperations(ip, path, 'data/models/', options)
        print('data/gyros/*')
        path = '../data/gyros/*'
        doFileOperations(ip, path, 'data/gyros/', options)
        print('data/params/*')
        path = 'data/params/'
        doFileOperations(ip, '../%s*' % path, path, options)

    elif interface == 'time':
      cmd = '../install/setup_robot --date --ip %s' % ip
      p = subprocess.Popen(cmd,shell=True)
      p.wait()
    
    elif interface == 'detect_lib':
      doFileOperations(ip, '../lib/detect_lib/libdetect_lib.so', 'lib/i386-linux-gnu/', options)
    
    elif interface == 'models':
      doFileOperations(ip, '../lib/detect_lib/testing/models/*.tflite', 'data/models/', options)
      doFileOperations(ip, '../lib/detect_lib/testing/models/*.yaml', 'data/models/', options)

    else:
      print >>sys.stderr,'Invalid interface: %s' % interface

def playSound():
  if options.enable_sound:
    try:
      p = subprocess.Popen('mpg123 %s/bin/ding.mp3' % NAO_HOME,shell=True,stderr=subprocess.PIPE,stdout=subprocess.PIPE)
      p.communicate()
    except: pass

if __name__ == '__main__':
  buildDir = os.path.join(NAO_HOME,'build')
  os.chdir(buildDir)
  from optparse import OptionParser
  usage  = 'copy_robot [ip] interface [interface]'
  usage += '\n  Interfaces: %s' % (' '.join(validInterfaces))
  usage += '\n  all: %s' % (' '.join(allInterfaces))
  parser = OptionParser(usage)
  parser.add_option('--debug',dest='debug',action='store_true',default=False,help='Copy debug version')
  parser.add_option('--fast',dest='configure',action='store_false',default=True,help='NOT USED')
  parser.add_option('--id',dest='robotID',action='store',type='int',default=None,help='robot id to use')
  parser.add_option('--verify',dest='verify',action='store_true',default=False,help='verify checksums, do not copy')
  parser.add_option('--copy-verify',dest='copy_verify',action='store_true',default=False,help='copy and then verify checksums')
  parser.add_option('--config-file',dest='config_file',action='store',type='string',default=None,help='config file when copying config')
  parser.add_option("--sound", '-s',dest='enable_sound',action='store_true',default=False,help='Makes a sound when finished compiling')
  parser.add_option("--optimize",dest="optimize",action='store_true',default=False,help='Enable build optimizations for demos and games.')
  options,args = parser.parse_args()
  if len(args) < 1:
    parser.parse_args(['--help'])
    playSound()
    sys.exit(1)
  
  ip,args = getIP(args)
  if ip is None:
    ip = os.getenv('CURRENT_ROBOT')
    if ip is None:
      print >>sys.stderr,'Could not figure out what robot you wanted'
      print >>sys.stderr,'Either specify the ip on the command line or set $CURRENT_ROBOT'
      sys.exit(1)
    print 'Using robot from $CURRENT_ROBOT: %s' % ip
  if '.' not in ip:
    ip = baseIP % ip
  print 'Using robot IP: %s ' % ip
  ipSplit = ip.rpartition('.')
  robot_id = ipSplit[2]
  interfaces = []
  # get interfaces
  for arg in args:
    arg = arg.lower()
    if arg == 'all' or arg == 'everything':
      interfaces.extend(allInterfaces)
    elif arg == 'install':
      interfaces.extend(installInterfaces)
    elif arg == "pythonswig":
      interfaces.append("python")
    else:
      interfaces.append(arg)
  # make interfaces unique
  interfaces = makeUnique(interfaces)
  if len(interfaces) == 0:
    print >>sys.stderr,'No interfaces specified'
    print >>sys.stderr,'validInterfaces: %s' % (' '.join(validInterfaces))
    sys.exit(1)
  # check interfaces
  for interface in interfaces:
    if interface not in validInterfaces:
      print >>sys.stderr,'Interface not in list of validInterfaces: %s' % interface
      print >>sys.stderr,'validInterfaces: %s' % (' '.join(validInterfaces))
      sys.exit(1)
  robotID = options.robotID
  if robotID is None:
    robotID = ip.split('.')[-1]
  if options.copy_verify:
    options.verify = False
    main(ip,interfaces,options,robotID)
    options.verify = True
  main(ip,interfaces,options,robotID)
  playSound()
